// 3장. 자바 스크립트에서 비동기 처리 다루기

function work(callback) {
  setTimeout(() => {
    const start = Date.now();
    for (let i = 0; i < 1000000000; i++) {}
    const end = Date.now();
    console.log(end - start + 'ms');
    callback();
  }, 0);
}

console.log('작업 시작!');
work(() => {
  console.log('작업이 끝났어요!');
});
console.log('다음 작업!');

// work() 함수가 끝난 다음에 어떤 작업을 처리하고 싶다면 콜백 함수를 파라미터로 전달해주어야 합니다. Callback 함수란 함수 타입의 값을 파라미터로 넘겨줘서 파라미터로 받은 함수를 특정 작업이 끝나고 호출을 해주는 것을 의미

// 이러한 작업들은 주로 비동기적으로 처리하게 됩니다.
// Ajax Web API 요청: 만약 서버쪽에서 데이터를 받와아야 할 때는, 요청을 하고 서버에서 응답을 할 때 까지 대기를 해야 되기 때문에 작업을 비동기적으로 처리합니다.
// 파일 읽기: 주로 서버 쪽에서 파일을 읽어야 하는 상황에는 비동기적으로 처리합니다.
// 암호화/복호화: 암호화/복호화를 할 때에도 바로 처리가 되지 않고, 시간이 어느정도 걸리는 경우가 있기 때문에 비동기적으로 처리합니다.
// 작업 예약: 단순히 어떤 작업을 몇초 후에 스케쥴링 해야 하는 상황에는, setTimeout 을 사용하여 비동기적으로 처리합니다.

// 질문!!! 왜 Callback 함수를 사용하는가?
// callback 함수는 일반적으로 어떤 함수가 실행이 완료된 후 실행이 됩니다.
// 비동기 처리 방식의 문제점을 해결하기 위해! 특정 로직이 끝났을 시점에 원하는 동작을 실행할 수 있도록 조절!
// callback 함수를 여러번 쓰면 생기는 문제인 callback hell 이 있는데 이를 해결하기 위해 Promise, async/await 을 사용한다.

// Promise
// ES6 기능

// async/await
// ES8 기능
